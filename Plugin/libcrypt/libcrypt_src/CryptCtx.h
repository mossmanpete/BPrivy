#ifndef _H_CRYPT_CTX_
#define _H_CRYPT_CTX_

#include <string>
#include <cstdint>
#include <unordered_map>
#include <openssl/evp.h>
#include "Utils.h"
#include <libscrypt.h>
#include <openssl/evp.h>

namespace crypt
{
	using std::wstring;

	/** Call this to initialize the library once. Initializes openssl. */
	void	initLibcrypt	();
	void	unloadLibcrypt	();

	typedef enum {
		CPHR_NULL = 0,
		CIPHER_BF_CBC = 1, // Blowfish in CBC mode
		CIPHER_AES_CBC     // AES (Rijndael) in CBC mode
	} CipherEnum;

	typedef enum {
		DEFAULT_KEY_LEN = 32 // Key Length in #bytes
	} CRYPT_CONSTANT;

	struct CryptInfo
	{
		typedef enum {
			LOGN = 15,
			R = 8,
			P = 1,
			SALT_SIZE = SCRYPT_SALT_SIZE,
			SIG_SIZE = 32,
		} CONSTANT;

		/** Following are persisted to disk */
		size_t		m_logN;
		size_t		m_r;
		size_t		m_p;
		CipherEnum	m_cipher; // Cipher Enum
		size_t		m_keyLen; // Key Length in #bytes.
		Array<uint8_t, SALT_SIZE> m_salt;
		Array<uint8_t, SIG_SIZE>  m_signature;

		/** Following are ephemeral */
		const EVP_CIPHER*	m_EVP_CIPHER;
		size_t		m_ivLen;  // IV size in #bytes
		size_t		m_blkSize;// cipher's block size in #bytes

					CryptInfo		(CipherEnum cipher, size_t keyLen);
					CryptInfo		(const std::string& cryptInfo);
					~CryptInfo		() {zero();}
		void		zero			();

	private:
					CryptInfo		(const CryptInfo&);// not to be defined
		CryptInfo&	operator=		(const CryptInfo&);// not to be defined
		void		ConstructCommon	(CipherEnum);
	};

	class CryptCtx
	{
	public:
		static CipherEnum			CipherStrToEnum		(const wstring& cipher);
		/**
		*	Creates and stores a crypt-ctx and returns its handle. This handle should
		*	be returned to Javascript for use later with the API. The $ parameter is
		*   zeroed out if the call is successful. Throws exceptions in case of errors.
		* @param $. passwd. Gets zeroe'd out if the call is successful.
		* @param cipher. The cipher to use for en/decryption.
		* @param key_len. The length of the key to be generated for en/decryption.
		*/
		static unsigned	int			Make				(Buf<wchar_t>& $,
														 CipherEnum cipher = CIPHER_BF_CBC,
														 unsigned int key_len = DEFAULT_KEY_LEN);
		/**
		*	Creates and stores a crypt-ctx and returns its handle. This handle should
		*	be returned to Javascript for use later with the API. The $ parameter is
		*   zeroed out if the call is successful. Throws exceptions in case of errors.
		* @param $. passwd. Gets zeroe'd out if the call is successful.
		* @param cryptInfo. cryptInfo bytes read from an encrypted DB. Should've been
		*	generated by GetInfo().Marshall().
		*/
		static unsigned int			Make				(Buf<wchar_t>& $,
														 std::string& cryptInfo);
		static const CryptCtx&		Get					(unsigned int handle);
		static void					Destroy				(unsigned int handle);
		const CryptInfo&			GetInfo				() const {return m_info;}
		void						Encrypt				(const std::string& in,
														 BufHeap<uint8_t>& out) const;
		void						Decrypt				(const BufHeap<uint8_t>& in,
														 std::string& out) const;

	protected:
									CryptCtx			(CipherEnum cipher,
														 unsigned int keyLen);
									CryptCtx			(const std::string& cryptInfo);
		virtual						~CryptCtx			() {zero();}
		virtual void				zero				();
		static size_t				GetHeaderSize		(size_t inSize);
		void						PutHeader			(Buf<uint8_t>& outbuf,
														 size_t dataSize,
														 size_t headerSize) const;

	private:
									CryptCtx			(const CryptCtx&);// not to be defined
		CryptCtx&					operator=			(const CryptCtx&);// not to be defined
		static unsigned int			MakeHandle			() {return ++s_lastHandle;}
		typedef std::unordered_map<unsigned int, CryptCtx*> map;
		static map					s_ctxMap;
		static unsigned int			s_lastHandle;

		/** Object variables */
		Array<uint8_t, SCRYPT_DK_SIZE> m_dk;
		const CryptInfo					m_info;
	};

	inline CipherEnum
	CryptCtx::CipherStrToEnum(const wstring& cipher)
	{
		if (cipher == L"CIPHER_AES_CBC") {
			return CIPHER_AES_CBC;
		}
		else // || if (cipher == L"CIPHER_BF_CBC")
		{
			return CIPHER_BF_CBC;
		}
	};
}
#endif // !_H_CRYPT_CTX_